syntax = "proto3"; // Use proto3 syntax for the protocol buffer.

package dfs; // Define the package name.

option go_package = "dfs/proto"; // Set Go package path for generated files
import "google/protobuf/empty.proto";

// Master Tracker Service: Handles file upload/download requests and heartbeat updates.
service MasterTracker {
  // A client requests a Data Keeper to upload a file.
  rpc RequestUpload(UploadRequest) returns (UploadResponse);
  // Data Keeper notifies the Master Tracker that a file has been uploaded successfully.
  rpc RequestUploadSuccess(FileUploadSuccess) returns (google.protobuf.Empty);
  // A client requests addresses to download a file.
  rpc RequestDownload(DownloadRequest) returns (DownloadResponse);
  // Data Keeper sends a heartbeat to indicate it is alive.
  rpc SendHeartbeat(HeartbeatRequest) returns (HeartbeatResponse);
  // Data Keeper registers its port status with the Master Tracker.
  rpc RegisterPortStatus(PortRegistrationRequest) returns (PortRegistrationResponse);
}

service DataKeeper {
  rpc ReplicateFile(ReplicationRequest) returns (FileUploadSuccess);
}

service Client {
  rpc NotifyUploadCompletion(UploadSuccessResponse) returns (google.protobuf.Empty);
}

message ReplicationRequest {
  string filename = 1;
  string destinationAddress = 2;
  string destinationName = 3;
}


// schemas for file upload/download and heartbeat.
// Message definitions for file upload/download.
message UploadRequest {
  string filename = 1;
}

message FileUploadSuccess {
  string dataKeeperName = 1;
  string filename = 2;
  string filePath = 3;
  int32 portNumber = 4;
  string clientAddress = 5;
}

message UploadSuccessResponse {
  bool success = 1;
}

message UploadResponse {
  string dataKeeperAddress = 1;
}

message DownloadRequest { 
  string filename = 1;
}

message DownloadResponse {
  repeated string dataKeeperAddresses = 1;
}

// Message definitions for heartbeat.
message HeartbeatRequest {
  string dataKeeperName = 1;
  string dataKeeperAddress = 2;
  repeated PortStatus portsTCP = 3;
  repeated PortStatus portsGRPC = 4;
}

message HeartbeatResponse {
  bool success = 1;
}

message PortStatus {
  int32 portNumber = 1;
  bool isAvailable = 2;
}

message PortRegistrationRequest {
  string dataKeeperName = 1; // Name of the DataKeeper
  int32 portNumber = 2; // Port number being reported
  bool isAvailable = 3; // Availability status of the port
}

message PortRegistrationResponse {
  bool success = 1; // Indicates if the MasterTracker successfully recorded the status
}